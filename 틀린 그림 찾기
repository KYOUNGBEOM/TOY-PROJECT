#include <stdio.h>
#include <time.h>
#include <stdlib.h>

int arrayAnimal[4][5]; // 카드 지도 (20장의 카드)
int checkAnimal[4][5]; // 뒤집혔는지 여부 확인
char* strAnimal[10];

int getEmptyPosintion();
int conv_pos_x(int x);
int conv_pos_y(int y);
int foundAllAnimals();

void initAnimalArray();
void initAnimalName();
void shuffleAnimal();
void printAnimals();
void printQuestion();

int main(void) {
	srand(time(NULL));

	initAnimalArray();
	initAnimalName();

	shuffleAnimal();

	int failCount = 0; // 실패 횟수

	while (1) {
		int select1 = 0; // 사용자가 선택한 처음 수
		int select2 = 0; // 사용자가 선택한 두 번째 수

		printAnimals(); // 동물 위치 출력
		printQuestion(); // 문제 출력(카드 지도)
		printf("\n뒤집을 카드를 2개 고르세요 : ");
		scanf_s("%d %d", &select1, &select2);

		if (select1 == select2) { // 같은 카드 선택시 무효
			continue;
		}

		// 좌표에 해당하는 카드를 뒤집어 보고 같은 안같은지 확인

		// 정수를 좌표로(x,y)로 변환
		int firstSelect_x = conv_pos_x(select1);
		int firstSelect_y = conv_pos_y(select1);

		int secondSelect_x = conv_pos_x(select2);
		int secondSelect_y = conv_pos_y(select2);

		if ((checkAnimal[firstSelect_x][firstSelect_y] == 0 // 카드가 뒤집히지 않았는지 확인
			&& checkAnimal[secondSelect_x][secondSelect_y] == 0)

			&&

			(arrayAnimal[firstSelect_x][firstSelect_y]
				== arrayAnimal[secondSelect_x][secondSelect_y])
			) // 두 동물이 같은지
		{
			printf("\n\n빙고! : %s 발견\n\n", strAnimal[arrayAnimal[firstSelect_x][firstSelect_y]]);
			checkAnimal[firstSelect_x][firstSelect_y] = 1;
			checkAnimal[secondSelect_x][secondSelect_y] = 1;
		}
		// 다른 동물인 경우
		else
		{
			printf("\n\n땡!! 틀렸거나, 이미 뒤집힌 카드입니다.\n\n");
			printf("%d 번 카드 : %s\n", select1, strAnimal[arrayAnimal[firstSelect_x][firstSelect_y]]);
			printf("%d 번 카드 : %s\n", select2, strAnimal[arrayAnimal[secondSelect_x][secondSelect_y]]);
			printf("\n\n");

			failCount++;
		}

		// 모든 동물들 찾았는지 여부, 참: 1, 거짓 : 0
		if (foundAllAnimals() == 1) {
			printf("게임이 종료되었습니다.\n\n");
			printf("지금까지 총 %d 번 틀리셨습니다.\n\n", failCount);
			exit(0);
		}
	}
		return 0;
	
}

void initAnimalArray() {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 5; j++) {
			arrayAnimal[i][j] = -1;
		}
	}
}

void initAnimalName() {
	strAnimal[0] = "원숭이";
	strAnimal[1] = "하마";
	strAnimal[2] = "강아지";
	strAnimal[3] = "고양이";
	strAnimal[4] = "돼지";
	strAnimal[5] = "코끼리";
	strAnimal[6] = "기린";
	strAnimal[7] = "낙타";
	strAnimal[8] = "타조";
	strAnimal[9] = "호랑이";


}

void shuffleAnimal() {
	// □□□□□
	// □□□□□
	// □□□□□
	// □□□□□

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 2; j++) {
			int pos = getEmptyPosintion();
			int x = conv_pos_x(pos);
			int y = conv_pos_y(pos);

			arrayAnimal[x][y] = i;
		}
	}
}

// 좌표에서 빈 공간 찾기
int getEmptyPosintion() {
	// □□□□□    0  1  2  3  4
	// □□□□□    5  6  7  8  9
	// □□□□□   10 11 12 13 14
	// □□□□□   15 16 17 18 19
	while (1) {
		int randPos = rand() % 20; // 0 ~ 19 사이의 숫자 반환
		int x = conv_pos_x(randPos);
		int y = conv_pos_y(randPos);

		if (arrayAnimal[x][y] == -1) {
			return randPos;
		}
	}
	return 0;
}

	int conv_pos_x(int x) {
		// 19 → (3,4)
		return x / 5;

	}
	int conv_pos_y(int y) {
		return y % 5; // y를 5로 나눈 나머지
	}

	void printAnimals() { // 동물 위치 출력
		// □□□□□    0  1  2  3  4
		// □□□□□    5  6  7  8  9
		// □□□□□   10 11 12 13 14
		// □□□□□   15 16 17 18 19
		printf("\n----------------------정답----------------------\n\n");
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 5; j++) {
				printf(" %8s", strAnimal[arrayAnimal[i][j]]);
			}
			printf("\n");
		}
		printf("\n------------------------------------------------\n\n");
	}

	void printQuestion() { // 문체 출력 (카드 지도)
		printf("\n\n(문제)\n");
		int seq = 0;

		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 5; j++) {
				// 카드를 뒤집어서 정답을 맞췄으면 동물 이름
				if (checkAnimal[i][j] != 0) {
					printf("%8s", strAnimal[arrayAnimal[i][j]]);
				}
				else {
					printf("%8d", seq);
				}
				seq++;
			}
			printf("\n");
		}
	}

	int foundAllAnimals() {
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 5; j++) {
				if (checkAnimal[i][j] == 0) {
					return 0;
				}
			}
		}
		return 1;
	}
